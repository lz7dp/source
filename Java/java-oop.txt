Java is an object-oriented programming (OOP) language, which means it focuses on organizing 
code into objects that represent real-world entities or concepts. Here's a simple explanation
 of object-oriented programming in Java:

    Objects: In OOP, an object is like a blueprint or template that defines the characteristics
    and behavior of a specific thing. For example, you could have an object called "Car" that 
    has properties like color, model, and speed, and methods (functions) like "startEngine" and
    "accelerate."

    Classes: A class is a code representation of an object. It defines the structure and 
    behavior of the objects of that type. Going back to our "Car" example, the class would be
    the blueprint that describes how the Car objects should be created and what they can do.

    Encapsulation: Encapsulation means that the data (properties) and methods (functions) that
    belong to a class are kept together, hidden from outside interference, and only accessible 
    through specific methods. This helps maintain data integrity and makes code easier to manage.

    Inheritance: Inheritance allows you to create a new class (subclass) based on an existing 
    class (superclass). The subclass inherits the properties and methods of the superclass, 
    which promotes code reuse and hierarchy. For instance, you can have a "SportsCar" class 
    that inherits from the "Car" class, inheriting its properties and methods while adding some 
    specific functionalities of sports cars.

    Polymorphism: Polymorphism means that different classes can be treated as instances of a 
    common superclass. This allows you to write code that can work with objects of different 
    classes in a consistent way. For example, if both "Car" and "SportsCar" are subclasses of
    a common "Vehicle" class, you can use a list of "Vehicle" objects to store both regular 
    cars and sports cars.

    Abstraction: Abstraction allows you to hide the complexity of the object's inner workings
    and expose only the essential features that are relevant to the outside world. It lets you
    focus on what an object does rather than how it does it. For example, when using a microwave,
    you don't need to understand its internal mechanisms to use it effectively.

By using these principles of object-oriented programming, you can create modular, maintainable, 
and scalable Java programs. Objects and classes help you model real-world scenarios in your code,
making it easier to design and understand complex systems.

***

Let's dive into some simple examples to illustrate the concepts of Java object-oriented programming.

**1. Creating a Class and Object:**

In this example, we'll create a class called `Person` that represents a person's name and age.
We'll also create an object of the `Person` class and set its properties.

```java
// Define the class
class Person {
    String name;
    int age;
}

// Create an object and set its properties
public class Main {
    public static void main(String[] args) {
        // Create a Person object
        Person john = new Person();

        // Set the properties of the object
        john.name = "John";
        john.age = 30;

        // Print the properties
        System.out.println("Name: " + john.name);
        System.out.println("Age: " + john.age);
    }
}
```

**2. Encapsulation:**

In this example, we'll add methods to the `Person` class to ensure proper encapsulation.

```java
class Person {
    private String name;
    private int age;

    // Getter methods
    public String getName() {
        return name;
    }

    public int getAge() {
        return age;
    }

    // Setter methods
    public void setName(String name) {
        this.name = name;
    }

    public void setAge(int age) {
        this.age = age;
    }
}

public class Main {
    public static void main(String[] args) {
        Person john = new Person();
        john.setName("John");
        john.setAge(30);

        // Access properties using getter methods
        System.out.println("Name: " + john.getName());
        System.out.println("Age: " + john.getAge());
    }
}
```

**3. Inheritance:**

In this example, we'll demonstrate inheritance by creating a `Student` class that inherits 
from the `Person` class.

```java
class Person {
    private String name;
    private int age;

    // Constructor
    public Person(String name, int age) {
        this.name = name;
        this.age = age;
    }

    // Getter and setter methods...
}

// Student class inherits from Person
class Student extends Person {
    private int studentId;

    public Student(String name, int age, int studentId) {
        super(name, age);
        this.studentId = studentId;
    }

    public int getStudentId() {
        return studentId;
    }
}

public class Main {
    public static void main(String[] args) {
        Student alice = new Student("Alice", 20, 12345);
        System.out.println("Name: " + alice.getName());
        System.out.println("Age: " + alice.getAge());
        System.out.println("Student ID: " + alice.getStudentId());
    }
}
```

**4. Polymorphism:**

In this example, we'll use polymorphism to create an array of `Person` objects, including
both regular people and students.

```java
class Person {
    // ...

    public void displayInfo() {
        System.out.println("Name: " + name);
        System.out.println("Age: " + age);
    }
}

class Student extends Person {
    // ...

    @Override
    public void displayInfo() {
        super.displayInfo();
        System.out.println("Student ID: " + studentId);
    }
}

public class Main {
    public static void main(String[] args) {
        Person[] people = new Person[2];
        people[0] = new Person("John", 30);
        people[1] = new Student("Alice", 20, 12345);

        for (Person person : people) {
            person.displayInfo();
            System.out.println();
        }
    }
}
```

These simple examples should give you a good starting point to understand Java object-oriented
programming. Remember, OOP is all about organizing your code into reusable, self-contained 
objects that interact with each other, making your programs more efficient and easier to maintain.
